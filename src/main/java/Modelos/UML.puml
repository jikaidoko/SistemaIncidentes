@startuml
allowmixing
agent RRHH
agent AreaComercial
agent MesaDeAyuda
MesaDeAyuda->Incidente:ABM
RRHH->Tecnico:ABM
AreaComercial->Cliente:ABM
Incidente<--Tecnico
Cliente<--Servicio
Cliente-->MensajeDeNotificacion
MensajeDeNotificacion-->Incidente
MensajeDeNotificacion-->CanalDeNotificacion
CanalDeNotificacion<|..EnvioEmail
CanalDeNotificacion<|..EnvioWhatsapp
Tecnico->CanalDeNotificacion
Incidente-->Problema
Incidente->ProvisionDeServicio
ProvisionDeServicio-->Cliente
ProvisionDeServicio-->Servicio
Problema-->Especialidad
Especialidad-->TecnicoDisponible
TecnicoDisponible-->Tecnico
class Cliente {
- idCliente
- cuit
- razonSocial
- List <Servicios> servicioContratado
}
note right of ProvisionDeServicio::recibeServicioTecnico
determina si puede recibir el servicio contratado
end note
class Servicio {
    -String idServicio;
    -String nombreServicio;
   +servicioContratado()
}
note right of Servicio::servicioContratado
agrega servicio contratado a la lista del cliente
end note
class MensajeDeNotificacion {
-LocalDate fechaDeCreacion;
-String titulo;
-String texto;
-Incidente incidente;
public boolean enviado ()
public void mensajeDeNotificacion ()
}
interface CanalDeNotificacion {
              public static void enviar_notificacion()
          }
class EnvioEmail{
    public void enviar_notificacion()
}
class EnvioWhatsapp {
    public void enviar_notificacion()
}
class Incidente {
-String id;
-Cliente cliente;
-List <Problema> problemaReportado;
-SistemaOperativo os;
-List<Tecnico> tecnicos;
-Time tiempoMaximoResolucion;
-Timestamp fechaInicio;
-Timestamp fechaCierre;
+Estado estado;
}
class ProvisionDeServicio {
 -List<Servicio> servicioContratado;
 -Cliente cliente;
 -fechaDeAlta;
 -pagoMensual;
 boolean recibeServicioTecnico ()
}
class Estado {
+void {abstract} cambiar estado;
}
class EstadoIniciado {
+void asignarTecnico()
}
class EstadoEnProceso {
 +void asignarTiempoExtra ()
}
class EstadoResuelto {
+void notificarAlCliente ()
}
note right of Estado:Patrón de diseño State
Incidente-->Estado
Estado--|>EstadoIniciado
Estado--|>EstadoEnProceso
Estado--|>EstadoResuelto
EstadoIniciado-->EstadoEnProceso
EstadoEnProceso-->EstadoResuelto
EstadoResuelto->CanalDeNotificacion
class Problema {
-String idProblema;
-String descripcion;
+boolean esComplejo()
+void asignarTecnico()
}
class Tecnico {
    -String idTec;
    -String nombre;
    -String apellido;
    -LocalDate fechaDeNacimiento;
    -String telefono;
    -String email;
    -List <MensajeDeNotificacion> mensajes;
    -List <Especialidad> especialidades;
    +boolean tecnicoDisponible();
+boolean tecnicoIdoneo ();
}
class Especialidad {
- List<Especialidad> especialidades;
+mapTecnicosDisponibles()
}
interface TecnicoDisponible{
@FunctionalInterface
+mapTecnicosDisponibles()
}
@enduml